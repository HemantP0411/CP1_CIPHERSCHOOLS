//solution with sorting O(N*log(N))

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        int c=1,max=0;
        sort(nums.begin(),nums.end());
        if(nums.size()==1)
        {
            return 1;
        }
        if(nums.size()==0)
        {
            return 0;
        }
        for(int i=1;i<nums.size();i++)
        {
            if(nums[i]==nums[i-1])
            {
                continue;
            }
            if(nums[i]-nums[i-1]==1)
            {
                c++;
            }
            else
            {
                    if(max<=c)
                    {
                        max=c;
                    }
                c=1;
            }
        }
        if(max<c)
        {
            max=c;
        }
        return max;
    }
};

//using sets

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
            unordered_set<int> s;
    
    int ans =0;
    
    for(int i=0;i<nums.size();i++){
        s.insert(nums[i]);
    }
    
    
    for(int i=0;i<nums.size();i++){
        
        if(s.find(nums[i]-1)==s.end()){
            
           int curr =1;
            while(s.find(nums[i] + curr) != s.end()){
                curr++;
                
            }
            ans =max(ans ,curr);
        }
    }
        return ans;
    }
};
